(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{595:function(v,_,e){"use strict";e.r(_);var t=e(17),s=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"redis-的数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis-的数据结构"}},[v._v("#")]),v._v(" Redis 的数据结构")]),v._v(" "),e("p",[v._v("一提到 Redis，我们的脑子里马上就会出现一个词：“快。”但是你有没有想过，Redis 的快，到底是快在哪里呢？实际上，这里有一个重要的表现：它接收到一个键值对操作后，能以微秒级别的速度找到数据，并快速完成操作。")]),v._v(" "),e("p",[v._v("数据库这么多，为啥 Redis 能有这么突出的表现呢？一方面，这是因为它是内存数据库，所有操作都在内存上完成，内存的访问速度本身就很快。另一方面，这要归功于它的数据结构。这是因为，键值对是按一定的数据结构来组织的，操作键值对最终就是对数据结构进行增删改查操作，所以高效的数据结构是 Redis 快速处理数据的基础。这节课，我就来和你聊聊数据结构。")]),v._v(" "),e("p",[v._v("说到这儿，你肯定会说：“这个我知道，不就是 String（字符串）、List（列表）、Hash（哈希）、Set（集合）和 Sorted Set（有序集合）吗？”")]),v._v(" "),e("p",[v._v("其实，这些只是 Redis 键值对中值的数据类型，也就是数据的保存形式。而这里，我们说的数据结构，是要去看看它们的底层实现。简单来说，底层数据结构一共有 6 种，分别是简单动态字符串、双向链表、压缩列表、哈希表、跳表和整数数组。它们和数据类型的对应关系如下图所示：")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/82/01/8219f7yy651e566d47cc9f661b399f01.jpg",alt:""}})]),v._v(" "),e("p",[v._v("可以看到，String 类型的底层实现只有一种数据结构，也就是简单动态字符串。而 List、Hash、Set 和 Sorted Set 这四种数据类型，都有两种底层实现结构。通常情况下，我们会把这四种类型称为集合类型，它们的特点是一个键对应了一个集合的数据。")]),v._v(" "),e("p",[v._v("看到这里，其实有些问题已经值得我们去考虑了：")]),v._v(" "),e("ul",[e("li",[v._v("这些数据结构都是值的底层实现，键和值本身之间用什么结构组织？")]),v._v(" "),e("li",[v._v("为什么集合类型有那么多的底层结构，它们都是怎么组织数据的，都很快吗？")]),v._v(" "),e("li",[v._v("什么是简单动态字符串，和常用的字符串是一回事吗？")])]),v._v(" "),e("p",[v._v("我们先来看下键和值之间是用什么结构组织的。")]),v._v(" "),e("h1",{attrs:{id:"键和值用什么结构来组织"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#键和值用什么结构来组织"}},[v._v("#")]),v._v(" 键和值用什么结构来组织？")]),v._v(" "),e("p",[v._v("为了实现从键到值的快速访问，Redis 使用了一个哈希表来保存所有的键值对。\n一个哈希表，其实就是一个数组，数组的每个元素是一个哈希桶。所以，我们常说，一个哈希表是由多个哈系桶组成的，每个哈希桶保存了键值对的数据。")]),v._v(" "),e("p",[v._v("看到这里，你可能会问了：“如果值是集合类型的话，作为数组元素的哈希桶怎么来保存呢？”其实，哈希桶中的元素保存的并不是值本身，而是指向具体值的指针。这也就是说，不管值是 String，还是集合类型，哈希桶中的元素都是指向它们的指针。")]),v._v(" "),e("p",[v._v("在下图中，可以看到，哈希桶中的 entry 元素中保存了"),e("em",[v._v("key和")]),v._v("value指针，分别指向了实际的键和值，这样一来，即使值是一个集合，也可以通过*value指针被查找到。")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/1c/5f/1cc8eaed5d1ca4e3cdbaa5a3d48dfb5f.jpg",alt:""}})]),v._v(" "),e("p",[v._v("因为这个哈希表保存了所有的键值对，所以，我也把它称为全局哈希表。哈希表的最大好处很明显，就是让我们可以用 O(1) 的时间复杂度来快速查找到键值对——我们只需要计算键的哈希值，就可以知道它所对应的哈希桶位置，然后就可以访问相应的 entry 元素。")]),v._v(" "),e("p",[v._v("你看，这个查找过程主要依赖于哈希计算，和数据量的多少并没有直接关系。也就是说，不管哈希表里有 10 万个键还是 100 万个键，我们只需要一次计算就能找到相应的键。")]),v._v(" "),e("p",[v._v("但是，如果你只是了解了哈希表的 O(1) 复杂度和快速查找特性，那么，当你往 Redis 中写入大量数据后，就可能发现操作有时候会突然变慢了。这其实是因为你忽略了一个潜在的风险点，那就是哈希表的冲突问题和 rehash 可能带来的操作阻塞。")]),v._v(" "),e("h1",{attrs:{id:"为什么哈希表操作变慢了"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么哈希表操作变慢了"}},[v._v("#")]),v._v(" 为什么哈希表操作变慢了？")]),v._v(" "),e("p",[v._v("当你往哈希表中写入更多数据时，哈希冲突是不可避免的问题。这里的哈希冲突，也就是指，两个 key 的哈希值和哈希桶计算对应关系时，正好落在了同一个哈希桶中。")]),v._v(" "),e("p",[v._v("毕竟，哈希桶的个数通常要少于 key 的数量，这也就是说，难免会有一些 key 的哈希值对应到了同一个哈希桶中。")]),v._v(" "),e("p",[v._v("Redis 解决哈希冲突的方式，就是链式哈希。链式哈希也很容易理解，就是指同一个哈希桶中的多个元素用一个链表来保存，它们之间依次用指针连接。")]),v._v(" "),e("p",[v._v("如下图所示：entry1、entry2 和 entry3 都需要保存在哈希桶 3 中，导致了哈希冲突。此时，entry1 元素会通过一个"),e("em",[v._v("next指针指向 entry2，同样，entry2 也会通过")]),v._v("next指针指向 entry3。这样一来，即使哈希桶 3 中的元素有 100 个，我们也可以通过 entry 元素中的指针，把它们连起来。这就形成了一个链表，也叫作哈希冲突链。")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/8a/28/8ac4cc6cf94968a502161f85d072e428.jpg",alt:""}})]),v._v(" "),e("p",[v._v("但是，这里依然存在一个问题，哈希冲突链上的元素只能通过指针逐一查找再操作。如果哈希表里写入的数据越来越多，哈希冲突可能也会越来越多，这就会导致某些哈希冲突链过长，进而导致这个链上的元素查找耗时长，效率降低。对于追求“快”的 Redis 来说，这是不太能接受的。")]),v._v(" "),e("p",[v._v("所以，Redis 会对哈希表做 rehash 操作。rehash 也就是增加现有的哈希桶数量，让逐渐增多的 entry 元素能在更多的桶之间分散保存，减少单个桶中的元素数量，从而减少单个桶中的冲突。那具体怎么做呢？")]),v._v(" "),e("p",[v._v("其实，为了使 rehash 操作更高效，Redis 默认使用了两个全局哈希表：哈希表 1 和哈希表 2。")]),v._v(" "),e("p",[v._v("一开始，当你刚插入数据时，默认使用哈希表 1，此时的哈希表 2 并没有被分配空间。随着数据逐步增多，Redis 开始执行 rehash，这个过程分为三步：")]),v._v(" "),e("ul",[e("li",[v._v("给哈希表 2 分配更大的空间，例如是当前哈希表 1 大小的两倍；")]),v._v(" "),e("li",[v._v("把哈希表 1 中的数据重新映射并拷贝到哈希表 2 中；")]),v._v(" "),e("li",[v._v("释放哈希表 1 的空间。")])]),v._v(" "),e("p",[v._v("到此，我们就可以从哈希表 1 切换到哈希表 2，用增大的哈希表 2 保存更多数据，而原来的哈希表 1 留作下一次 rehash 扩容备用。")]),v._v(" "),e("p",[v._v("这个过程看似简单，但是第二步涉及大量的数据拷贝，如果一次性把哈希表 1 中的数据都迁移完，会造成 Redis 线程阻塞，无法服务其他请求。此时，Redis 就无法快速访问数据了。")]),v._v(" "),e("p",[v._v("为了避免这个问题，Redis 采用了渐进式 rehash。")]),v._v(" "),e("p",[v._v("简单来说，就是在第二步拷贝数据的时候，Redis 仍然正常处理客户端请求，每处理一个请求的时候，从哈希表1的第一个索引位置开始，顺带着将这个索引位置上的所有 entries 拷贝到哈希表2中，等处理下一个请求的时候，再顺带拷贝哈希表1的下一个索引位置的 entries。如下图所示：")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/73/0c/73fb212d0b0928d96a0d7d6ayy76da0c.jpg",alt:""}})]),v._v(" "),e("p",[v._v("这样就巧妙地把一次性大量拷贝的开销，分摊到了多次处理请求的过程中，避免了耗时操作，保证了数据的快速访问。")]),v._v(" "),e("p",[v._v("好了，到这里，你应该就能理解，Redis 的键和值是怎么通过哈希表组织的了。对于 String 类型来说，找到哈希桶就能直接增删改查了，所以，哈希表的 O(1) 操作复杂度也就是它的复杂度了。")]),v._v(" "),e("h1",{attrs:{id:"集合数据操作效率"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集合数据操作效率"}},[v._v("#")]),v._v(" 集合数据操作效率")]),v._v(" "),e("p",[v._v("和 String 类型不同，一个集合类型的值，第一步是通过全局哈希表找到对应的哈希桶位置，第二步才是在集合中再增删改查。那么，集合的操作效率和哪些因素有关呢？")]),v._v(" "),e("p",[v._v("首先，和集合的底层数据结构有关。例如，使用哈希表实现的集合，要比使用链表实现的集合访问效率高。其次，操作效率和这些操作本身的执行特点也有关，比如读写一个元素的操作要比读写所有元素效率高。")]),v._v(" "),e("p",[v._v("接下来，我们就分别看看集合类型的底层数据结构和操作复杂度。")]),v._v(" "),e("h1",{attrs:{id:"有哪些底层数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有哪些底层数据结构"}},[v._v("#")]),v._v(" 有哪些底层数据结构？")]),v._v(" "),e("p",[v._v("前面说过，集合类型的底层数据结构主要由5种：整数数组、双向链表、哈希表、压缩列表和跳表。")]),v._v(" "),e("p",[v._v("其中，哈希表的操作特点我们刚刚已经学过了；整数数组和双向链表也很常见，它们的操作特征都是顺序读写，也就是通过数组下标或者链表的指针逐个元素访问，操作复杂度基本是 O(N)，操作效率比较低；压缩列表和跳表我们平时接触得可能不多，但它们也是 Redis 重要的数据结构，所以我来重点解释一下。")]),v._v(" "),e("p",[v._v("压缩列表实际上类似于一个数组，数组中的每一个元素都对应保存一个数据。和数组不同的是，"),e("strong",[v._v("压缩列表在表头有三个字段 zlbytes、zltail 和 zllen，分别表示列表长度、列表尾的偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束。")])]),v._v(" "),e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/95/a0/9587e483f6ea82f560ff10484aaca4a0.jpg",alt:""}})]),v._v(" "),e("p",[v._v("在压缩列表中，如果我们要查找定位第一个元素和最后一个元素，可以通过表头三个字段的长度直接定位，复杂度是 O(1)。而查找其他元素时，就没有这么高效了，只能逐个查找，此时的复杂度就是 O(N) 了。")]),v._v(" "),e("p",[v._v("我们再来看下跳表。")]),v._v(" "),e("p",[v._v("有序链表只能逐一查找元素，导致操作起来非常缓慢，于是就出现了跳表。具体来说，跳表在链表的基础上，增加了"),e("strong",[v._v("多级索引，通过索引位置的几个跳转，实现数据的快速定位")]),v._v("，如下图所示：")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/1e/b4/1eca7135d38de2yy16681c2bbc4f3fb4.jpg",alt:""}})]),v._v(" "),e("p",[v._v("如果我们要在链表中查找 33 这个元素，只能从头开始遍历链表，查找 6 次，直到找到 33 为止。此时，复杂度是 O(N)，查找效率很低。")]),v._v(" "),e("p",[v._v("为了提高查找速度，我们来增加一级索引：从第一个元素开始，每两个元素选一个出来作为索引。这些索引再通过指针指向原始的链表。")]),v._v(" "),e("p",[v._v("例如，从前两个元素中抽取元素 1 作为一级索引，从第三、四个元素中抽取元素 11 作为一级索引。此时，我们只需要 4 次查找就能定位到元素 33 了。如果我们还想再快，可以再增加二级索引：从一级索引中，再抽取部分元素作为二级索引。")]),v._v(" "),e("p",[v._v("例如，从一级索引中抽取 1、27、100 作为二级索引，二级索引指向一级索引。这样，我们只需要 3 次查找，就能定位到元素 33 了。可以看到，这个查找过程就是在多级索引上跳来跳去，最后定位到元素。这也正好符合“跳”表的叫法。当数据量很大时，跳表的查找复杂度就是 O(logN)。")]),v._v(" "),e("p",[v._v("好了，我们现在可以按照查找的时间复杂度给这些数据结构分下类了：")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/fb/f0/fb7e3612ddee8a0ea49b7c40673a0cf0.jpg",alt:""}})]),v._v(" "),e("h1",{attrs:{id:"不同操作的复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不同操作的复杂度"}},[v._v("#")]),v._v(" 不同操作的复杂度")]),v._v(" "),e("p",[v._v("集合类型的操作类型很多，有读写单个集合元素的，例如 HGET、HSET，也有操作多个元素的，例如 SADD，还有对整个集合进行遍历操作的，例如 SMEMBERS。这么多操作，它们的复杂度也各不相同。")]),v._v(" "),e("p",[v._v("而复杂度的高低又是我们选择集合类型的重要依据\n这里总结一个“四句口诀”，希望能帮助你快速记住集合常见操作的复杂度。这样你在使用过程中，就可以提前规避高复杂度操作了。")]),v._v(" "),e("ul",[e("li",[v._v("单元素操作是基础；")]),v._v(" "),e("li",[v._v("范围操作非常耗时；")]),v._v(" "),e("li",[v._v("统计操作通常高效；")]),v._v(" "),e("li",[v._v("例外情况只有几个。")])]),v._v(" "),e("p",[v._v("第一，"),e("strong",[v._v("单元素操作，是指每一种集合类型对单个数据实现的增删改查操作")]),v._v("。例如，Hash 类型的 HGET、HSET 和 HDEL，Set 类型的 SADD、SREM、SRANDMEMBER 等。这些操作的复杂度由集合采用的数据结构决定，例如，HGET、HSET 和 HDEL 是对哈希表做操作，所以它们的复杂度都是 O(1)；Set 类型用哈希表作为底层数据结构时，它的 SADD、SREM、SRANDMEMBER 复杂度也是 O(1)。")]),v._v(" "),e("p",[v._v("第二，"),e("strong",[v._v("范围操作，是指集合类型中的遍历操作，可以返回集合中的所有数据")]),v._v("，比如 Hash 类型的 HGETALL 和 Set 类型的 SMEMBERS，或者返回一个范围内的部分数据，比如 List 类型的 LRANGE 和 ZSet 类型的 ZRANGE。这类操作的复杂度一般是 O(N)，比较耗时，我们应该尽量避免。")]),v._v(" "),e("p",[v._v("第三，"),e("strong",[v._v("统计操作，是指集合类型对集合中所有元素个数的记录")]),v._v("，例如 LLEN 和 SCARD。这类操作复杂度只有 O(1)，这是因为当集合类型采用压缩列表、双向链表、整数数组这些数据结构时，这些结构中专门记录了元素的个数统计，因此可以高效地完成相关操作。")]),v._v(" "),e("p",[v._v("第四，"),e("strong",[v._v("例外情况，是指某些数据结构的特殊记录，例如压缩列表和双向链表都会记录表头和表尾的偏移量")]),v._v("。这样一来，对于 List 类型的 LPOP、RPOP、LPUSH、RPUSH 这四个操作来说，它们是在列表的头尾增删元素，这就可以通过偏移量直接定位，所以它们的复杂度也只有 O(1)，可以实现快速操作。")]),v._v(" "),e("h1",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" 小结")]),v._v(" "),e("p",[v._v("这节课，我们学习了 Redis 的底层数据结构，这既包括了 Redis 中用来保存每个键和值的全局哈希表结构，也包括了支持集合类型实现的双向链表、压缩列表、整数数组、哈希表和跳表这五大底层结构。")]),v._v(" "),e("p",[v._v("Redis 之所以能快速操作键值对，一方面是因为 O(1) 复杂度的哈希表被广泛使用，包括 String、Hash 和 Set，它们的操作复杂度基本由哈希表决定，另一方面，Sorted Set 也采用了 O(logN) 复杂度的跳表。不过，集合类型的范围操作，因为要遍历底层数据结构，复杂度通常是 O(N)。这里，我的建议是：用其他命令来替代，例如可以用 SCAN 来代替，避免在 Redis 内部产生费时的全集合遍历操作。")]),v._v(" "),e("p",[v._v("因地制宜地使用 List 类型。例如，既然它的 POP/PUSH 效率很高，那么就将它主要用于 FIFO 队列场景，而不是作为一个可以随机读写的集合。")]),v._v(" "),e("p",[v._v("Redis 数据类型丰富，每个类型的操作繁多，我们通常无法一下子记住所有操作的复杂度。所以，最好的办法就是掌握原理，以不变应万变。")]),v._v(" "),e("p",[v._v("参考：")]),v._v(" "),e("ul",[e("li",[v._v("极客时间《Redis核心技术与实战》")]),v._v(" "),e("li",[v._v("http://gk.link/a/11kxV")])])])}),[],!1,null,null,null);_.default=s.exports}}]);